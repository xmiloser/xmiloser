# xxxtimuses
Config files for my GitHub profile.
大数据之用户画像算法





是根据客户人口统计学信息，社交关系，偏好习惯和交互行为等信息而抽象出来的标签化画像 
大数据分布式架构体系


特征工程_用户画像


https://github.com/xmiloser/xxxtimuses.git

https://viewer.diagrams.net/?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&title=%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio#R1Vpde5s2FP41umweJCEhXYI%2Fsm5dtz3Z1u6SxqpNS4yHSRP31%2B8cIWwwauJkwbFvbOnow%2BY9X6%2BOIHx0c39ZpqvFr8XM5IQFs3vCx4QxykUAXyjZ1JIoYrVgXmazWhTsBFfZd%2BNWNtLbbGbWTlaLqqLIq2zVFV4Xy6W5rjqytCyLu%2B60z0U%2B6whW6dz0BFfXad6Xfshm1aKWKhbt5D%2BZbL5ofplKXY%2FcpM1k9yTrRTor7loiPiF8VBZFVbdu7kcmR%2FAaXD683XzI332Vlz%2F%2Fsf43%2FSv55c%2F3f7%2BpN5s%2BZcn2EUqzrJ699W%2BXl%2BLL20%2F5e17ESfjZbKbvZ29UvfW3NL91eLlnrTYNgGVxu5wZ3CQgPLlbZJW5WqXXOHoHJgOyRXWTQ49C88B%2F6p7omykrc9%2FSk%2Fvnl6a4MVW5gSlulAn3T50VskBfiFpyt9Mq005Vi5ZGWRQ2U1NnS%2FPt%2Fju8oOEgewJ8tA%2FfRJF4SuIxmYQk0URpMpFEjYiWtjEhWp0oxFHYhZhLD8SUeSAOg4HwZR58I6IBX%2BGAVgCrIElMND8TWHXoAZUeEdTQb7QUrRSNViGcYKtxQFSEjYSTWFmYwYwFSgBssOSTxDtk4hAzpr5IEQxmxx5D3kcP0ssKm%2BtsOc9NjKnvcRRthmzyWnDBeKhZIN2n4rKZ4vJycAFCEfAwoFwGIoSZA6pCCNZRBW9AbylCyL4e5GBq4I%2BrYQ5WvPqfiGzZTPqp2TZ4ECnZILNNb1EPKa6Fx2SlGiq1BYNTg4d19LiZvSI4vsQPiSm0gRLSPMTQyEmSBEOngog57QEIT1jtOXSezZfQvgaUTAkCxCEDOhu7gZtsNsPlSWnW2XdnYAj%2FqsiWlX1QkRAxxr1uq2JdOz5uva7K4qsZFXkB%2B46XxRJ3%2BZzl%2BZ7o5RXVjHY5XANiOxqovhbpYEr0sQuB7KLOf3pE4hEqETSYhI5mxPLUvMAPbsg8LMODroiGQtcTa9EPhMUS%2FAMIBrcSip4BDeB0yRh%2F1MNGLJcGQoK%2BxZH3nYUSKPVxvaNqwUf2BLI4JM4WXh1bG4%2BtsZ%2BVjVNNvScUH8B8uDOg9EAMZhqQOLL2DdYMKYCjBGwdIdbWB%2BBzQlTYGrKhBuZDA5bEtSdMcBq6R2jpeHvymOhmFQSr9k9ANwlcNNOn6y17h3rdV2bk4elSDqVK3UPKzObmynWLsloU82KZ5pOdNOliuZvzrihWDsEvpqo2joJjUu7ia%2B6z6mOr%2FY8l6sL1xvduZ9vZNJ0lPO%2FHdqdeJS3lt4LdQtvrrPzdlBlAhgTDCp%2Bo4nVxW16bA1JrlZZz89COjfMgzA%2BaTGnytMq%2BdYt6L28AkT9pdVMUehx1vE6DC3e9W1vmsJu8HbJyaGPym1rPhaO1sDsrjBVKNQmSt07dreWJJZa43KbD83Bq6q3UHdevtxXcs%2FVr8YhXv7gD80MdODotB%2FYUtD0HM4WeWfMdV5ptOzCzk%2Bs6Lntwcp2ep5jLdYRtaMCS2rdhSUzPxUuVuGCv7qZ9tI7hpqficuGhLqdOyuWYL2fabIY%2BA%2BcLjWT2hd1gmNo81%2F0C5XFr8%2ByAC7mXKBTTSEVcSA6ODw8tgK%2FtF4pDLngYKhYJJVkQajmkHuieHljk4QyhLxYNpgj9uCJepVQcRR2oWCA9Jhv1keLBYAHAcwA%2BStbTP8D0wUrxkcHxVcH6J%2Fd%2BuJQ5FoY%2FldCaY4tMpnj9hvwfuMYYzx1uuT0s6LqSsGUo9eQjnREO10MzqrvkI%2BxXgpVHS5TroUxY%2BNX0I3glVtCSuhw5Rt53Hjjzw2BuovHLO8Op3r%2FRINq7gOMHvvrAqBisssg9V3B1zTaOuyXG1usl9dEFrFL3D71DWCV%2F1n2dF8vBkjnvX9etbteLU8Nn%2B4bdoe%2FdDAcY81heXbi2dTBIXipu6lcUUxIEEs%2F95mkASoV4fUQ9FzFDEHveJ%2FIQ3QSTnIpI6RBY%2FyBQu9E3shtHmxv49h2vJ%2BU8A3bo7l69tGOtF1j55D8%3D

标签由两部分组成：
1、根据客户的行为数据直接得到的
比如：用户在网站或者APP上主动填写的数据，严格一些平台会要求客户上传身份证、学生证、驾驶证等，这样的数据准确性较高。
2、通过一系列算法或规则挖掘得到
比如：一个用户最近开始购买母婴类商品，奶粉尿布等，那么可以根据客户购买的频次和数量，结合客户的年龄、性别推断是否为新妈妈/爸爸。
用户画像其实就是希望通过某些手段对用户做甄别，把他们分成彼此相同或不同的人群或个体，进而区别化提供服务进行观察分析。

用户画像的价值
1、精准营销
精准营销是用户画像或者标签最直接和有价值的应用。这部分也是广告部门最注重的工作内容。当我们给各个用户打上各种“标签”之后，广告主（店铺、商家）就可以通过标签圈定他们想要的客户，进行精准的广告投放。
2、助力产品
一个产品想要得到广泛的应用，受众分析必不可少。产品经理需要懂用户，所以用户画像能帮助产品经理透过客户行为表象看到客户深层的动机和心理。
3、行业报告
通过对客户画像的分析可以了解行业动态，比如90后人群的消费偏好趋势分析、高端客户青睐品牌分析、不同地域品类消费差异分析等等。





1 . 数据内容举例（ ‘\t’ 分隔符）
用户id 下单时间 修改日期 地址 手机号
11723 1249488000 20160219 阳光大道101号8号楼158 1387483647
17955 1259488367 20160219 阳光大道101号8号楼158 1387483647

2 . 创建订单表
外部表、通过 data_id 来分区、‘ \t ’分隔符
create EXTERNAL table orders(
	uid int,
	create_time int,
	modify_date string,
	address string,
	mobile string
)
PARTITIONED BY (date_id string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';

2 . 上传数据：
hadoop fs -mkdir /hivedata/20160219
hadoop fs -put orders.txt /hivedata/20160219

4 . 载入数据:
ALTER TABLE orders DROP IF EXISTS PARTITION (date_id='20160219');
ALTER TABLE orders ADD PARTITION (date_id='20160219') LOCATION '/hivedata/20160219';
select * from orders where date_id=‘20160219’;【查询检验】

5.HQL: 五个维度

1.取每个uid下订单最多的那一天，并判断是周末还是工作日(即提取用户是喜欢在周末购物还是工作日购物特征)
这里使用到了case… when语句
create table if not exists tb_a
as 
select uid,case 
		when weekday=0 or weekday=6 then '周末' 
		else '工作日' 
	   end as weekday
from (
     select uid,weekday,RANK() OVER (PARTITION BY uid,weekday ORDER BY cnt DESC) as ro
     from (
           select uid,weekday,count(1) as cnt
           from (
	         select uid,pmod(datediff(from_unixtime(create_time),'2012-01-01'),7) as weekday 
	         from orders 
	         where date_id='20160219'
	   	   ) t
           group by uid,weekday
     ) t1
) tt
where ro=1;


2.找出每个用户最喜欢在一天中哪个时间段下订单
create table if not exists tb_b
as 
select uid,st
from (
      select uid,st,RANK() OVER(PARTITION BY uid,st ORDER BY cnt DESC) as ro
     from (
	   		select uid,st,count(1) as cnt
           from (
				select uid,case 
					when from_unixtime(create_time,'HH:MM') between '11:30' and '13:30' then '11:30~13:30'
               		when from_unixtime(create_time,'HH:MM') between '13:30' and '17:30' then '13:30~17:30'
                	when from_unixtime(create_time,'HH:MM') between '17:30' and '24:00' then '17:30~24:00' 
                	when from_unixtime(create_time,'HH:MM') between '0:00' and '8:00' then '0:00~8:00' 
               		when from_unixtime(create_time,'HH:MM') between '8:00' and '11:30' then '8:00~11:30'
                end st
                from orders as a 
                	where a.date_id='20160219'
	   		) t
           group by uid,st
     ) t1
) tt
where ro=1;

3.统计每个用户的下单的季节属性
create table if not exists tb_c
as 
select uid,concat_ws('|', collect_set(quanter)) as quanters
from (
      select uid,case 
		     when month(from_unixtime(create_time)) between 3 and 4 then '春'
		     when month(from_unixtime(create_time)) between 5 and 9 then '夏'
		     when month(from_unixtime(create_time)) between 10 and 11 then '秋'
		     else '冬' 
		 end quanter
      from orders
      where date_id='20160219'
) t
group by uid;

4.统计每个用户的地址和联系电话，以及是否有多个联系地址及多个联系电话
create table if not exists tb_d
as 
select uid, 
       concat_ws('|',collect_set(substr(address,0,5))) as addr_num, 
       concat_ws('|',collect_set(substr(mobile,0,5))) as mob_num,
       case 
	   		when count(distinct address)=1 then '1'
	   		when count(distinct address)=2 then '2'
	   		when count(distinct address) between 3 and 5 then '3~5'
			when count(distinct address)>5 then '>5' 
       end as addr_cnt,
       case 
	   		when count(distinct mobile)=1 then '1'
	   		when count(distinct mobile)=2 then '2'
	   		when count(distinct mobile) between 3 and 5 then '3~5'
	   		when count(distinct mobile)>5 then '>5' 
       end as mob_cnt
from orders as a 
	where a.date_id='20160219'
group by uid;

5.用户在哪些年下了订单
create table if not exists tb_e
as 
select uid,concat_ws('|', collect_set(cast(year(from_unixtime(create_time)) as string))) as years
from orders
	where date_id='20160219'
group by uid;

6.用户画像
SELECT '20160219' as date_id,
       tb_a.uid as uid,tb_a.weekday as weekday,
       tb_b.st as st,
       tb_e.years as years,
       tb_c.quanters as quanters,
       tb_d.addr_num as addr_num,tb_d.mob_num as mob_num,
       tb_d.addr_cnt as addr_cnt,tb_d.mob_cnt as mob_cnt
from tb_a
	left outer join tb_b
		on tb_a.uid=tb_b.uid
	left outer join tb_c
    	on tb_a.uid=tb_c.uid
	left outer join tb_d
    	on tb_a.uid=tb_d.uid
	left outer join tb_e
		on tb_a.uid=tb_e.uid;

7.创建目标表
create table user_image_day(
	date_modify int,
	uid string,
	weekday string,
	st string,
	years string,
	quanters string,
	addr_num string,
	mob_num string,
	addr_cnt string,
	mob_cnt string
)
PARTITIONED BY (date_id int);

INSERT OVERWRITE DIRECTORY '/user/hduser/warehouse/user_image_day/20160219'

SELECT distinct '20160219' as date_id,
	tb_a.uid as uid,tb_a.weekday as weekday,
    tb_b.st as st,
    tb_e.years as years,
    tb_c.quanters as quanters,
    tb_d.addr_num as addr_num,tb_d.mob_num as mob_num,
    tb_d.addr_cnt as addr_cnt,tb_d.mob_cnt as mob_cnt
from tb_a
	left outer join tb_b
		on tb_a.uid=tb_b.uid
    left outer join tb_c
    	on tb_a.uid=tb_c.uid
    left outer join tb_d
      	on tb_a.uid=tb_d.uid
	left outer join tb_e
		on tb_a.uid=tb_e.uid;
		
ALTER TABLE user_image_day DROP IF EXISTS PARTITION (date_id='20160219');
ALTER TABLE user_image_day ADD PARTITION (date_id='20160219') LOCATION '/user/hduser/warehouse/user_image_day/20160219';
select * from user_image_day;
